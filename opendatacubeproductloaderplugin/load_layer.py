# -*- coding: utf-8 -*-
"""
/***************************************************************************
 dataDisplayDialog
                                 A QGIS plugin
 This plugin displays data from datacube
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-05-06
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Ashutosh Vaish
        email                : ashutoshvaish6397@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License v3.0 as published*
 *   by the Free Software Foundation;                                      *
 *                                                                         *
 *                                                                         *
 ***************************************************************************/
"""

import os
from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction,QMessageBox,QWidget
from PyQt5.QtCore import QVariant
from qgis.core import QgsRasterLayer, QgsProject,QgsVectorLayer, QgsFields,QgsField,QgsFeature,QgsGeometry
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'load_layer.ui'))
class loadLayerDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(loadLayerDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.setFixedSize(self.frameSize())
        self.setWindowIcon(QIcon(":/plugins/OpenDataCube_Product_Loader/assets/icon.png"))

    def showIngestedDataOnCanvas(self,iface,conn,product,dataDisplayDialog,vLayer):
        import ast
        from psycopg2 import ProgrammingError
        try:
            curs=conn.cursor()
            curs.execute('SELECT lat,lon,id FROM agdc.dv_'+product+'_dataset;')
            ingestedLayer = QgsVectorLayer("Polygon?crs=epsg:4326", "Ingested Areas", "memory")
            fields = QgsFields()
            ingestedLayer.startEditing()
            fields.append(QgsField('id',QVariant.String))
            fields.append(QgsField('extent', QVariant.String))
            QgsProject.instance().addMapLayer(ingestedLayer).loadNamedStyle(os.path.dirname(os.path.abspath(__file__))+'\\assets\\polygon_style.qml')
            for coord in curs:
                feat = QgsFeature()
                id=coord[2]
                coord=ast.literal_eval(coord[0])+ast.literal_eval(coord[1])
                coord=[str(i) for i in coord] 
                wkt='POLYGON(('+coord[0]+' '+coord[2]+', '+coord[1]+' '+coord[2]+', '+coord[1]+' '+coord[3]+', '+coord[0]+' '+coord[3]+', '+coord[0]+' '+coord[2]+'))'
                geom = QgsGeometry()
                geom = QgsGeometry.fromWkt(wkt)
                feat.setGeometry(geom)
                ingestedLayer.dataProvider().addAttributes(fields)
                feat.setAttributes([id,','.join(coord)])
                ingestedLayer.dataProvider().addFeatures([feat])
            ingestedLayer.commitChanges()
            dataDisplayDialog.graphicsView.setLayers([ingestedLayer,vLayer])
            dataDisplayDialog.selectMapTool.setLayer(ingestedLayer)
            dataDisplayDialog.ingestedLayer=ingestedLayer
            self.close()
            dataDisplayDialog.tabWidget.setCurrentWidget(dataDisplayDialog.tabWidget.findChild(QWidget, 'selectCoordinates'))

        except ProgrammingError as e:
            dataDisplayDialog.appendLogs('Product does not exist')

        except Exception as e:

            dataDisplayDialog.appendLogs(e)
        finally:
            curs.execute("ROLLBACK")
            conn.commit()
    
    def userLayer(self,iface,conn,dataDisplayDialog):
        productName=self.productName.text().strip().lower()
        path = self.mQgsFileWidget.filePath()
        path=str(path)
        if path == '' and productName == '':
            QMessageBox.information(None, "Warning:", str('Please complete the form.')) 
        elif conn is None:
            QMessageBox.information(None, "Warning:", str('First connect to database server')) 
        else:
            try:
                vLayer = QgsVectorLayer(path, 'Datacube Base Layer')
                rLayer = QgsRasterLayer(path, 'Datacube Base Layer') 
                if vLayer.isValid():
                    QgsProject.instance().addMapLayer(vLayer)
                    dataDisplayDialog.graphicsView.setExtent(vLayer.extent())
                    self.showIngestedDataOnCanvas(iface,conn,productName,dataDisplayDialog,vLayer)
                elif rLayer.isValid():
                    QgsProject.instance().addMapLayer(rLayer)
                    dataDisplayDialog.graphicsView.setExtent(rLayer.extent())
                    self.showIngestedDataOnCanvas(iface,conn,productName,dataDisplayDialog,rLayer)
                else:
                    QMessageBox.information(None, "Warning:", str('Not a valid layer.')) 
            except Exception as e:
                dataDisplayDialog.appendLogs(e)
                
    def defaultLayer(self,iface,conn,dataDisplayDialog):
        productName=self.productName.text().strip().lower()
        if productName == '':
            QMessageBox.information(None, "Warning:", str('Please enter the product name.')) 
        elif conn is None:
            QMessageBox.information(None, "Warning:", str('First connect to database server')) 
        else:
            try:
                vLayer=QgsVectorLayer(os.path.dirname(os.path.abspath(__file__))+'\\assets\\States\\Admin2.shp','India',"ogr")
                QgsProject.instance().addMapLayer(vLayer)
                dataDisplayDialog.graphicsView.setExtent(vLayer.extent())
                self.showIngestedDataOnCanvas(iface,conn,productName,dataDisplayDialog,vLayer)
            except Exception as e:
                dataDisplayDialog.appendLogs(e)
